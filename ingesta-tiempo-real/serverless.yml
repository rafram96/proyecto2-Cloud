org: rafaelram
service: ingesta-tiempo-real


provider:
  name: aws
  runtime: python3.13
  stage: ${opt:stage, 'dev'}
  environment:
    S3_BUCKET: compras-data-${self:provider.stage}
    ES_ENDPOINT: ${env:ES_ENDPOINT}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}'
        - 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
      Resource: '*'

functions:
  purchasesStreamHandler:
    handler: purchases/handler.lambda_handler
    description: "Procesa INSERTs en t_compras y guarda compras en S3"
    events:
      - stream:
          type: dynamodb
          arn: !ImportValue api-compras-${self:provider.stage}-ComprasTableStreamArn
          batchSize: 10
          startingPosition: LATEST

  productsStreamHandler:
    handler: products/handler.lambda_handler
    description: "Procesa cambios en t_productos y actualiza Elasticsearch"
    package:
      include:
        - products/**
        - purchases/**
    events:
      - stream:
          type: dynamodb
          arn: !ImportValue api-productos-${self:provider.stage}-ProductosTableStreamArn
          batchSize: 50
          startingPosition: LATEST
          maximumBatchingWindowInSeconds: 10

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    zip: true
