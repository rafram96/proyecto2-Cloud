org: rafaelram
service: api-productos

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 30
  iam:
    role: arn:aws:iam::498917627164:role/LabRole
  environment:
    PRODUCTOS_TABLE: p_productos-${self:provider.stage}
    JWT_SECRET: mi-jwt-secret-super-seguro-y-secreto
    STAGE: ${self:provider.stage}

functions:
  crear:
    handler: src/handlers/crearProducto.lambda_handler
    events:
      - http:
          path: /productos/crear
          method: post
          cors: true
          integration: lambda
  listar:
    handler: src/handlers/listarProductos.lambda_handler
    events:
      - http:
          path: /productos/listar
          method: post
          cors: true
          integration: lambda
  buscar:
    handler: src/handlers/buscarProducto.lambda_handler
    events:
      - http:
          path: /productos/buscar
          method: post
          cors: true
          integration: lambda
  actualizar:
    handler: src/handlers/actualizarProducto.lambda_handler
    events:
      - http:
          path: /productos/actualizar
          method: post
          cors: true
          integration: lambda
  eliminar:
    handler: src/handlers/eliminarProducto.lambda_handler
    events:
      - http:
          path: /productos/eliminar
          method: post
          cors: true
          integration: lambda

resources:
  Resources:
    ProductosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: categoria
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TenantCategoriaIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: categoria
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Service
            Value: api-productos

    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: imagenes-productos-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred

    ProductImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProductImagesBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::imagenes-productos-${self:provider.stage}/*"

# Instrucciones de despliegue de Elasticsearch en EC2 (fuera de Serverless):
# Ejecutar en la instancia EC2 con AWS Academy usando Docker:
# mkdir -p /home/ec2-user/es-data
# docker run -d --name elasticsearch \
#   -p 9200:9200 -p 9300:9300 \
#   -e "discovery.type=single-node" \
#   -e "ES_JAVA_OPTS=-Xms2g -Xmx2g" \
#   -v /home/ec2-user/es-data:/usr/share/elasticsearch/data \
#   docker.elastic.co/elasticsearch/elasticsearch:8.8.1